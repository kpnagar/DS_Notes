------------------ Chapter 1 ------------------
# Interactive Python - ipython3

# often nicknamed “dunder” methods
# ? , ?? , *?
# Pasting Code Blocks: %paste and %cpaste

# Running External Code: %run
- %run myscript.py

# Timing Code Execution: %timeit
%timeit L = [n ** 2 for n in range(1000)]
%%timeit - multi line

# Help on Magic Functions: %timeit?, %magic, and %lsmagic
# IPython’s In and Out Objects - In, Out, In[1], Out[5]
Out[2] ** 2 + Out[3] ** 2

# For accessing a batch of previous inputs at once, the %history magic command

# Shell Commands in IPython - ! before any command
contents = !ls

# Controlling Exceptions: %xmode - there are three possibilities: Plain < Context < and Verbose (give more infomrmation).
%xmode Plain

# debugging is the %debug magic command. If you call it after hitting an exception, it will automatically open an inter‐active debugging prompt at the point of the exception. - quit
ipdb> up
ipdb> print(x)
ipdb> down

# it prevents cleanup of unused Python objects (known as garbage collection) that might otherwise affect the timing.
For this reason, %timeit results are usually noticeably faster than %time results.

# Profiling Full Scripts: %prun
def sum_of_lists(N):
    total = 0
    for i in range(5):
        L = [j ^ (j # i) for j in range(N)]
        total += sum(L)
    return total
%prun sum_of_lists(1000000)
check timing of each block so - we could start thinking about what changes we might make to improve the performance in the algorithm.

# Line-by-Line Profiling with %lprun - pip install line_profiler > %load_ext line_profiler

# Profiling Memory Use: %memit and %mprun - pip install memory_profiler - %load_ext memory_profiler > %memit sum_of_lists(1000000)

# the %%file magic to create a simple module called mprun_demo.py
%%file mprun_demo.py
def sum_of_lists(N):
    total = 0
    for i in range(5):
        L = [j ^ (j >> i) for j in range(N)]
        total += sum(L)
        del L # remove reference to L
    return total

from mprun_demo import sum_of_lists
%mprun -f sum_of_lists sum_of_lists(1000000)

-----------------------------------------------



------------------ Chapter 2 ------------------
# NumPy (short for Numerical Python)

# Subarrays as no-copy views
> when we modify any subarray of array, according to that the original array is also changed.

# Reshaping of Arrays
> row vector via reshape - x.reshape((1, 3))
> row vector via newaxis - x[np.newaxis, :]

# ufunc - universal functions (can be used to vectorize operations and thereby remove slow Python loops.)
> we don't need to loop np.aaray use direct ufunc.
> Another excellent source for more specialized and obscure ufuncs is the submodule scipy.special (from scipy import special)
> can be found on the NumPy and SciPy documentation

# Aggregations: Min, Max, and Everything in Between
> Summing the Values in an Array
    - L = np.random.random(100)
        sum(L)

> Minimum and Maximum
    - min(big_array), max(big_array)
    - M.min(axis=0) 
        - axis=0 => column , axis=1 => row

> Other aggregation functions - Docs

# Computation on Arrays: Broadcasting
> Another means of vectorizing operations is to use NumPy’s broadcasting functionality. Broadcasting is simply a
set of rules for applying binary ufuncs (addition, subtraction, multiplication, etc.) on arrays of different sizes.

# Fancy Indexing
- In[2]: [x[3], x[7], x[2]] = Out[2]: [71, 86, 14]
- ind = [3, 7, 4]
    x[ind]